package AVLTree;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Iterator;

import org.junit.Test;

public class RemoveTesting {
	int points = 0;
	@Test
	public void testingStressRemoval(){
		AVLTree<Integer> b = new AVLTree<Integer>();
		// Creating a tree using no rotations.
		int size = 1024; //128
		int v = size / 2;
		int temp;
		while (v > 0) {
			temp = v;
			while (temp < size){
				b.insert(temp);
				temp += v;
				}
			v = v / 2;
		}
		//nums(1,127,b.iterator());
//		System.out.println(b);
		assertEquals(0, b.getRotationCount());
		// now, let's see whether we will ever have 
		// more than one rotation on removal
//		int rc;
//		int rcc;
		//System.out.println("Testing num rotation: ");
		for (int i = 1023; i > 1; i--){
//			rc = b.getRotationCount();
			assertTrue(b.remove(i));
			assertEquals(i-1, b.size());
//			rcc = b.getRotationCount();
//			if ((rcc-rc)>1) {
//				System.out.println(rcc-rc);
//			}
		}
		assertEquals(502, b.getRotationCount()); // 57
		assertEquals(0, b.height());
		assertTrue(b.remove(1));
		assertEquals(0, b.size());	
		assertEquals(-1, b.height());
		points += 6;
	}
	@Test
	public void testingAVLRemoveBasics(){
	AVLTree<Integer> b = new AVLTree<Integer>();
	assertFalse(b.remove(5));
	
	assertTrue(b.insert(5));
	assertTrue(b.remove(5));
	assertEquals(0, b.getRotationCount());
	
	Iterator<Integer> i = b.iterator();
	assertFalse(i.hasNext());
	assertEquals(-1, b.height());
	points += 2;
}

@Test	
public void testingAVLRemoveSingleRightRotation(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(7);
	b.insert(9);
	b.insert(5);
	b.insert(3);
	b.insert(6);
	b.insert(10);
	b.insert(1);
	b.remove(6);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(7); m.add(3); m.add(1);  m.add(5); m.add(9); m.add(10);
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(true); v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(1, b.getRotationCount());
	assertEquals(2, b.height());
	points += 3;
}

@Test
public void testingAVLRemoveSingleRightRotationWithRoot(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(7);
	b.insert(9);
	b.insert(5);
	b.insert(3);
	b.remove(9);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(5); m.add(3); m.add(7);
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(1, b.getRotationCount());
	assertEquals(1, b.height());
	points += 3;
}

@Test
public void testingAVLRemoveDoubleRightRotation(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(7);
	b.insert(9);
	b.insert(5);
	b.insert(3);
	b.insert(6);
	b.insert(10);
	b.insert(4);
	b.remove(6);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(7); m.add(4); m.add(3);  m.add(5); m.add(9); m.add(10);
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(true); v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(2, b.getRotationCount());
	assertEquals(2, b.height());
	points += 3;
}

@Test
public void testingAVLRemoveDoubleRightRotationWithRoot(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(7);
	b.insert(9);
	b.insert(5);
	b.insert(6);
	b.remove(9);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(6); m.add(5); m.add(7);
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(2, b.getRotationCount());
	assertEquals(1, b.height());
	points += 3;
}

@Test
public void testingAVLRemoveSingleLeftRotation(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(3);
	b.insert(1);
	b.insert(5);
	b.insert(2);
	b.insert(4);
	b.insert(7);
	b.insert(9);
	b.remove(4);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(3); m.add(1); m.add(2); m.add(7); m.add(5); m.add(9);
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(true); v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(1, b.getRotationCount());
	assertEquals(2, b.height());
	points += 3;
}

@Test
public void testingAVLRemoveSingleLeftRotationWithRoot(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(3);
	b.insert(1);
	b.insert(5);
	b.insert(7);
	b.remove(1);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(5); m.add(3); m.add(7); 
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(1, b.height());
	assertEquals(1, b.getRotationCount());
	points += 3;
}

@Test
public void testingAVLRemoveDoubleLeftRotation(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(3);
	b.insert(2);
	b.insert(6);
	b.insert(1);
	b.insert(4);
	b.insert(7);
	b.insert(5);
	b.remove(7);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(3); m.add(2); m.add(1); m.add(5); m.add(4); m.add(6);
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(true); v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(2, b.height());
	assertEquals(2, b.getRotationCount());
	points += 3;
}	

@Test
public void testingAVLRemoveDoubleLeftRotationWithRoot(){		
	AVLTree<Integer> b = new AVLTree<Integer>();
	b.insert(3);
	b.insert(1);
	b.insert(5);
	b.insert(4);
	b.remove(1);
	Iterator<Integer> i = b.iterator();
	ArrayList<Integer> m = new ArrayList<Integer>();
	m.add(4); m.add(3); m.add(5); 
	ArrayList<Boolean>
	v = new ArrayList<Boolean>();
	v.add(true); v.add(true); v.add(false);
	assertTrue(i.hasNext());
	for (int k = 0; k < m.size(); k++){
		assertEquals(m.get(k), i.next());
		assertEquals((boolean)v.get(k), i.hasNext());
	}
	assertEquals(1, b.height());
	assertEquals(2, b.getRotationCount());
	points += 3;
}

	@Test
	public void testMiscellaneousRemoveCases(){
		AVLTree<Integer> b = new AVLTree<Integer>();
		int size = 8; 
		int v = size / 2;
		int temp;
		while (v > 0) {
			temp = v;
			while (temp < size){
				b.insert(temp);
				temp += v;
				}
			v = v / 2;
		}
		b.remove(4);
		b.remove(3);
		b.remove(2);
		Iterator<Integer> i = b.iterator();
		assertTrue(i.hasNext());
		int t1 = i.next();
		assertTrue(i.hasNext());
		int t2 = i.next();
		assertTrue(i.hasNext());
		int t3 = i.next();
		assertTrue(i.hasNext());
		int t4 = i.next();
		assertFalse(i.hasNext());
		if (!(t1 == 6 && t2 == 1 && t3 == 5 && t4 == 7))
			fail();
		points+=4;
	}
	
	@Test
	public void testingStressRandomInsertionRemoval(){
		AVLTree<Integer> b = new AVLTree<Integer>();
		int nums = 2000000;
		for (int i = 0; i < nums; i++) {
		    b.insert((int) (Math.random() * nums));
			b.height();
		}
		System.out.println(b.size());
		ArrayList<Integer> a = b.toArrayList();
		for (int i = 1; i < b.size(); i++) 
			if (a.get(i-1) > a.get(i)) fail("Not a BST.");
		for (int i = 0; i < nums; i++) {
			b.remove(i);
		}
		assertEquals(0, b.size());
		points += 8;
	}
}
